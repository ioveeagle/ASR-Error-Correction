#include "recog.h"

class ROM2FILE{
private:
	char headerFile[100];
	char CFile[100];
	void extractFileName(char *inFile);
	void getData(char *inFile);
	int tsNum, arcNum, maxStateNum;
public:
	ROM2FILE();
	~ROM2FILE();
	void doRom2File(char *inFile);
};

ROM2FILE::ROM2FILE(){}

ROM2FILE::~ROM2FILE(){
}

void ROM2FILE::extractFileName(char *inFile){
	char msg[MAXLEN], term[MAXLEN], *pch;
	strcpy(msg, inFile);

	pch=strtok(msg, "\\/");
	while(pch!=NULL){
		strcpy(term, pch);
		pch=strtok(NULL, "\\/");
	}

	pch=strtok(term, ".");
	strcpy(headerFile, pch);
	strcat(headerFile, ".h");
	strcpy(CFile, pch);
	strcat(CFile, ".c");
}

void ROM2FILE::doRom2File(char *inFile){
	UTILITY util;

	extractFileName(inFile);

	char msg[MAXLEN], todo[MAXLEN], *pch;
	int lineNum=util.getFileLineCount(inFile);
	
	FILE *in=util.openFile(inFile, "rt");
	FILE *fh=util.openFile(headerFile, "wt");
	FILE *fc=util.openFile(CFile, "wt");
	for(int i=0;i<lineNum;i++){
		fgets(msg, MAXLEN, in);
		msg[strlen(msg)-1]='\0';
		strcpy(todo, msg);
		pch=strstr(todo, "=");

		fprintf(fc, "%s\n", msg);
		if(pch!=NULL){
			pch=strtok(todo, "=");
			fprintf(fh, "extern %s;\n", pch);
			// ----
			char term[MAXLEN];
			strcpy(term, "");
			strcpy(todo, pch);
			pch=strtok(todo, " ");
			while(pch!=NULL){
				strcpy(term, pch);
				pch=strtok(NULL, " ");
			}
			if(strcmp(term, "arcNum")==0){
				strcpy(todo, msg);
				todo[strlen(todo)-1]='\0';
				pch=strtok(todo, "=");
				pch=strtok(NULL, "=");
				arcNum=atoi(pch);
			}
			if(strcmp(term, "tsNum")==0){
				strcpy(todo, msg);
				todo[strlen(todo)-1]='\0';
				pch=strtok(todo, "=");
				pch=strtok(NULL, "=");
				tsNum=atoi(pch);
			}
		}
		else{
			pch=strstr(todo, "/");
			if(pch!=NULL)
				fprintf(fh, "%s\n", msg);
		}
	}

	fclose(in);
	fclose(fh);
	fclose(fc);

	// define global variables
	int beamSize=2000;
	if(arcNum>=16384){ // 2^14
		printf("arcNum %d exceeds range: 14 bits used for arc encoding\n", arcNum);
		exit(1);
	}
	FILE *fg=util.openFile("search.h", "wt");
	fprintf(fg, "// ---------- VARIABLES: generated by program\n");
	fprintf(fg, "#define MAX_STATE_NUM 4\n");
	fprintf(fg, "#define MIN_SCORE -2147483647\n");
	fprintf(fg, "#define RESETVALUE -1\n");
	fprintf(fg, "#define CLEARCACHE 255\n");
	fprintf(fg, "#define CLEARTOKEN -1\n");
	fprintf(fg, "#define ARENASIZE 4000\n");
	fprintf(fg, "#define BEAMSIZE %d\n", beamSize);
	fprintf(fg, "#define SUM_SHIFT 10\n");
	fprintf(fg, "#define SCORE_BIT_WIDTH 0xFFFF\n");
	fprintf(fg, "#define STATE_BIT_SHIFT 16\n");
	fprintf(fg, "#define ARC_BIT_SHIFT 18\n\n");
	fprintf(fg, "unsigned int arena[ARENASIZE];\n");
	fprintf(fg, "unsigned int backupArena[BEAMSIZE];\n");
	fprintf(fg, "short int stateCompete[BEAMSIZE*MAX_STATE_NUM];\n");
	// arc2stateCompete
	fprintf(fg, "short int arc2stateCompete[%d];\n", arcNum);
	fprintf(fg, "unsigned char cacheScore[%d];\n", tsNum);
	// estimated RAM
	int ram=0;
	ram+=(254*4); // ARENASIZE
	ram+=(beamSize*4); // BEAMSIZE
	ram+=(beamSize*4*1); // BEAMSIZE*MAX_STATE_NUM
	ram+=(arcNum*1);	// arc2stateCompete
	ram+=(tsNum*1);	// cacheScore, tsNum
	// show message
	printf("Arc num: %d\n", arcNum);
	printf("HMM state num: %d\n", tsNum);
	printf("Estimated RAM size: %d bytes\n", ram);
	fclose(fg);
	
	// 8k ram
	/*int beamSize=130;
	if(arcNum>=16384){ // 2^14
		printf("arcNum %d exceeds range: 14 bits used for arc encoding\n", arcNum);
		exit(1);
	}
	FILE *fg=util.openFile("search.h", "wt");
	fprintf(fg, "// ---------- VARIABLES: generated by program\n");
	fprintf(fg, "#define MAX_STATE_NUM 4\n");
	fprintf(fg, "#define MIN_SCORE -2147483647\n");
	fprintf(fg, "#define RESETVALUE 255\n");
	fprintf(fg, "#define ARENASIZE 254\n");
	fprintf(fg, "#define BEAMSIZE %d\n", beamSize);
	fprintf(fg, "#define SUM_SHIFT 10\n");
	fprintf(fg, "#define SCORE_BIT_WIDTH 0xFFFF\n");
	fprintf(fg, "#define STATE_BIT_SHIFT 16\n");
	fprintf(fg, "#define ARC_BIT_SHIFT 18\n\n");
	fprintf(fg, "unsigned int arena[ARENASIZE];\n");
	fprintf(fg, "unsigned int backupArena[BEAMSIZE];\n");
	fprintf(fg, "unsigned char stateCompete[BEAMSIZE*MAX_STATE_NUM];\n");
	// arc2stateCompete
	fprintf(fg, "unsigned char arc2stateCompete[%d];\n", arcNum);
	fprintf(fg, "unsigned char cacheScore[%d];\n", tsNum);
	// estimated RAM
	int ram=0;
	ram+=(254*4); // ARENASIZE
	ram+=(beamSize*4); // BEAMSIZE
	ram+=(beamSize*4*1); // BEAMSIZE*MAX_STATE_NUM
	ram+=(arcNum*1);	// arc2stateCompete
	ram+=(tsNum*1);	// cacheScore, tsNum
	// show message
	printf("Arc num: %d\n", arcNum);
	printf("HMM state num: %d\n", tsNum);
	printf("Estimated RAM size: %d bytes\n", ram);
	fclose(fg);*/
}

int main(int argc, char **argv){
	if(argc!=2){
		printf("Usage: %s rom.data\n", argv[0]);
		exit(1);
	}

	ROM2FILE r2f;
	r2f.doRom2File(argv[1]);

	return 0;
}
